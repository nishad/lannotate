{"version":3,"sources":["../src/server.ts"],"sourcesContent":["import type { AnyOrama } from '@orama/orama'\nimport { FILESYSTEM_NOT_SUPPORTED_ON_RUNTIME } from './errors.js'\nimport { persist, restore } from './index.js'\nimport type { FileSystem, PersistenceFormat, Runtime } from './types.js'\nimport { detectRuntime } from './utils.js'\n\nexport const DEFAULT_DB_NAME = `orama_bump_${+new Date()}`\n\nlet _fs: FileSystem\n\nexport async function persistToFile<T extends AnyOrama>(\n  db: T,\n  format: PersistenceFormat = 'binary',\n  path?: string,\n  runtime?: Runtime\n): Promise<string> {\n  if (!runtime) {\n    runtime = detectRuntime()\n  }\n\n  if (!_fs) {\n    _fs = await loadFileSystem(runtime)\n  }\n\n  if (!path) {\n    path = await getDefaultOutputFilename(format, runtime)\n  }\n\n  const serialized = await persist(db, format, runtime)\n\n  await _fs.writeFile(path, serialized)\n\n  return path\n}\n\nexport async function restoreFromFile<T extends AnyOrama>(\n  format: PersistenceFormat = 'binary',\n  path?: string,\n  runtime?: Runtime\n): Promise<T> {\n  if (!runtime) {\n    runtime = detectRuntime()\n  }\n\n  if (!_fs) {\n    _fs = await loadFileSystem(runtime)\n  }\n\n  if (!path) {\n    path = await getDefaultOutputFilename(format, runtime)\n  }\n\n  const data = await _fs.readFile(path)\n  return restore(format, data, runtime)\n}\n\nasync function loadFileSystem(runtime: Runtime): Promise<FileSystem> {\n  switch (runtime) {\n    case 'node': {\n      const { readFile, writeFile } = await import('node:fs/promises')\n      const { resolve } = await import('node:path')\n\n      return {\n        cwd: process.cwd,\n        resolve,\n        readFile: readFile as FileSystem['readFile'],\n        writeFile: writeFile as FileSystem['writeFile']\n      }\n    }\n    /* c8 ignore next 13 */\n    case 'deno': {\n      // @ts-expect-error Deno allows TS imports\n      const { resolve } = await import('https://deno.land/std/path/mod.ts')\n\n      // @ts-expect-error Deno is only available in Deno\n      const { cwd, readTextFile: readFile, writeTextFile: writeFile } = Deno\n\n      return {\n        cwd: cwd as FileSystem['cwd'],\n        resolve: resolve as FileSystem['resolve'],\n        readFile: readFile as FileSystem['readFile'],\n        writeFile: writeFile as FileSystem['writeFile']\n      }\n    }\n    default:\n      throw new Error(FILESYSTEM_NOT_SUPPORTED_ON_RUNTIME(runtime))\n  }\n}\n\nasync function getDefaultOutputFilename(format: PersistenceFormat, runtime: Runtime): Promise<string> {\n  if (!_fs) {\n    _fs = await loadFileSystem(runtime)\n  }\n\n  return _fs.resolve(_fs.cwd(), await getDefaultFileName(format, runtime))\n}\n\nexport async function getDefaultFileName(format: PersistenceFormat, runtime?: Runtime): Promise<string> {\n  if (!runtime) {\n    runtime = detectRuntime()\n  }\n\n  let extension: string\n\n  switch (format) {\n    case 'json':\n      extension = 'json'\n      break\n    case 'dpack':\n      extension = 'dpack'\n      break\n    case 'binary':\n      extension = 'msp'\n  }\n\n  let dbName: string = DEFAULT_DB_NAME\n\n  /* c8 ignore next 3 */\n  if (runtime === 'deno') {\n    // @ts-expect-error Deno is only available in Deno\n    dbName = Deno.env.get('ORAMA_DB_NAME') ?? DEFAULT_DB_NAME\n  } else {\n    dbName = process?.env?.ORAMA_DB_NAME ?? DEFAULT_DB_NAME\n  }\n\n  return `${dbName}.${extension}`\n}\n"],"names":["FILESYSTEM_NOT_SUPPORTED_ON_RUNTIME","persist","restore","detectRuntime","DEFAULT_DB_NAME","Date","_fs","persistToFile","db","format","path","runtime","loadFileSystem","getDefaultOutputFilename","serialized","writeFile","restoreFromFile","data","readFile","resolve","cwd","process","readTextFile","writeTextFile","Deno","Error","getDefaultFileName","extension","dbName","env","get","ORAMA_DB_NAME"],"mappings":"AACA,SAASA,mCAAmC,QAAQ,cAAa;AACjE,SAASC,OAAO,EAAEC,OAAO,QAAQ,aAAY;AAE7C,SAASC,aAAa,QAAQ,aAAY;AAE1C,OAAO,MAAMC,kBAAkB,CAAC,WAAW,EAAE,CAAC,IAAIC,OAAO,CAAC,CAAA;AAE1D,IAAIC;AAEJ,OAAO,eAAeC,cACpBC,EAAK,EACLC,SAA4B,QAAQ,EACpCC,IAAa,EACbC,OAAiB,EACA;IACjB,IAAI,CAACA,SAAS;QACZA,UAAUR;IACZ,CAAC;IAED,IAAI,CAACG,KAAK;QACRA,MAAM,MAAMM,eAAeD;IAC7B,CAAC;IAED,IAAI,CAACD,MAAM;QACTA,OAAO,MAAMG,yBAAyBJ,QAAQE;IAChD,CAAC;IAED,MAAMG,aAAa,MAAMb,QAAQO,IAAIC,QAAQE;IAE7C,MAAML,IAAIS,SAAS,CAACL,MAAMI;IAE1B,OAAOJ;AACT,CAAC;AAED,OAAO,eAAeM,gBACpBP,SAA4B,QAAQ,EACpCC,IAAa,EACbC,OAAiB,EACL;IACZ,IAAI,CAACA,SAAS;QACZA,UAAUR;IACZ,CAAC;IAED,IAAI,CAACG,KAAK;QACRA,MAAM,MAAMM,eAAeD;IAC7B,CAAC;IAED,IAAI,CAACD,MAAM;QACTA,OAAO,MAAMG,yBAAyBJ,QAAQE;IAChD,CAAC;IAED,MAAMM,OAAO,MAAMX,IAAIY,QAAQ,CAACR;IAChC,OAAOR,QAAQO,QAAQQ,MAAMN;AAC/B,CAAC;AAED,eAAeC,eAAeD,OAAgB,EAAuB;IACnE,OAAQA;QACN,KAAK;YAAQ;gBACX,MAAM,EAAEO,SAAQ,EAAEH,UAAS,EAAE,GAAG,MAAM,MAAM,CAAC;gBAC7C,MAAM,EAAEI,QAAO,EAAE,GAAG,MAAM,MAAM,CAAC;gBAEjC,OAAO;oBACLC,KAAKC,QAAQD,GAAG;oBAChBD;oBACAD,UAAUA;oBACVH,WAAWA;gBACb;YACF;QACA,qBAAqB,GACrB,KAAK;YAAQ;gBACX,0CAA0C;gBAC1C,MAAM,EAAEI,QAAO,EAAE,GAAG,MAAM,MAAM,CAAC;gBAEjC,kDAAkD;gBAClD,MAAM,EAAEC,IAAG,EAAEE,cAAcJ,SAAQ,EAAEK,eAAeR,UAAS,EAAE,GAAGS;gBAElE,OAAO;oBACLJ,KAAKA;oBACLD,SAASA;oBACTD,UAAUA;oBACVH,WAAWA;gBACb;YACF;QACA;YACE,MAAM,IAAIU,MAAMzB,oCAAoCW,UAAS;IACjE;AACF;AAEA,eAAeE,yBAAyBJ,MAAyB,EAAEE,OAAgB,EAAmB;IACpG,IAAI,CAACL,KAAK;QACRA,MAAM,MAAMM,eAAeD;IAC7B,CAAC;IAED,OAAOL,IAAIa,OAAO,CAACb,IAAIc,GAAG,IAAI,MAAMM,mBAAmBjB,QAAQE;AACjE;AAEA,OAAO,eAAee,mBAAmBjB,MAAyB,EAAEE,OAAiB,EAAmB;IACtG,IAAI,CAACA,SAAS;QACZA,UAAUR;IACZ,CAAC;IAED,IAAIwB;IAEJ,OAAQlB;QACN,KAAK;YACHkB,YAAY;YACZ,KAAK;QACP,KAAK;YACHA,YAAY;YACZ,KAAK;QACP,KAAK;YACHA,YAAY;IAChB;IAEA,IAAIC,SAAiBxB;IAErB,oBAAoB,GACpB,IAAIO,YAAY,QAAQ;QACtB,kDAAkD;QAClDiB,SAASJ,KAAKK,GAAG,CAACC,GAAG,CAAC,oBAAoB1B;IAC5C,OAAO;YACIiB;QAATO,SAASP,CAAAA,oBAAAA,qBAAAA,KAAAA,IAAAA,CAAAA,eAAAA,QAASQ,GAAG,cAAZR,0BAAAA,KAAAA,IAAAA,aAAcU,aAAF,AAAD,KAAoB3B;IAC1C,CAAC;IAED,OAAO,CAAC,EAAEwB,OAAO,CAAC,EAAED,UAAU,CAAC;AACjC,CAAC"}